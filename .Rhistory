library(dplyr)
library(ggplot2)
library(pheatmap)
library(metan)
library(stats)
library(MASS)
library(factoextra)
library(gridExtra)
library(gt)
library(psych)
library(ggdendro)
library(tidyverse)
mva_data <- read.csv("./data/mva.csv",header = TRUE)
anova_data <- read.csv("./data/anova.csv", header = TRUE)
# initial_data <- read.csv("./data/initial.csv, header = TRUE")
boxplot_data <- read.csv("./data/boxplot.csv", header = TRUE)
anova_data %>%
str()
anova_data$Rep <- as.factor(anova_data$Rep)
anova_data$Treat <- as.factor(anova_data$Treat)
anova_data$Geno <- as.factor(anova_data$Geno)
anova_data %>%
str()
summary(anova_data[,-c(1,2,3)])
variables <- names(anova_data)
for(i in 4:11){
output <- paste0(variables[i]," : ", sd(anova_data[,i]) %>% round(3))
print(output)
}
variables <- names(anova_data)
variables <- variables[4:11]
for(var in variables){
print(paste0("Anova for: ", var))
formula <- as.formula(paste(var, "~Rep+Treat+Geno"))
model <- aov(formula, data = anova_data)
print("anova result : ------------------------")
print(summary(model))
}
box_data <- read.csv("./data/Boxplot_edited2.csv", header = T)
str(box_data)
box_data$Geno <- as.factor(box_data$Geno)
box_data$Rep <- as.factor(box_data$Rep)
box_data$Treat <- as.factor(box_data$Treat)
variables <- names(box_data)[4:11]
path <- getwd()
output_dir <- paste0(path, "/images/boxplots/")
if(!dir.exists(output_dir)){
dir.create(output_dir, recursive = TRUE)
}
for (var in variables) {
formula <- as.formula(paste0(var, " ~ Treat"))
print(paste("Boxplot for: ", var))
p <- ggplot(box_data, aes_string(x = "Treat", y = var)) +
geom_boxplot(fill = "#8cbf13", color = "black", outlier.color = "red", outlier.shape = 16, outlier.size = 2) +
labs(x = " ", y = var) +
theme_minimal(base_size = 15) +  # Use a minimal theme with larger base font size
theme(
axis.text.x = element_text(hjust = 1),
panel.background = element_rect(fill = "white"),
plot.background = element_rect(fill = "white"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank()
)
file_name_box <- paste0(output_dir, var, ".png")
ggsave(file_name_box, plot = p, width = 9, height = 6, dpi = 300)
p
}
mva_data %>%
head()
mva_data %>%
str()
mva_data$Rep <- as.factor(mva_data$Rep)
mva_data$Geno <- as.factor(mva_data$Geno)
pca <- prcomp(mva_data[,-c(1,2)], center = TRUE, scale = TRUE)
print(summary(pca))
print(names(pca))
pca$rotation
pca$x
principal_comps <- pca$x
correlations <- cor(mva_data[,-c(1,2)], principal_comps)
print(correlations)
eigenvalues <- pca$sdev^2
explained_variance <- eigenvalues/sum(eigenvalues)*100
scree_data <- data.frame(
PC = paste0("PC", 1:length(explained_variance)),
variance = explained_variance
)
hline_value = 3
scree_plot <- ggplot(scree_data, aes(x = PC, y = variance))+
geom_bar(stat = "identity", fill = "#8cbf13")+
geom_text(aes(label = round(variance,1)), vjust = -0.5)+
geom_line(aes(x = 1:length(pca$sdev),y = pca$sdev^2/sum(pca$sdev^2)*100),color = "blue", size =0.4 )+
geom_hline(yintercept = hline_value,linetype = "dashed", color = "red",lwd = 0.4)+
xlab("Principal Component")+
ylab("Percentage of variance Explained")+
ggtitle("Scree Plot")
ggsave("./images/scree_plot/scree_plot.png", scree_plot,width = 12, height = 8, dpi = 600)
scree_plot
biplot <- fviz_pca_biplot(pca,
geom.ind = "point",
pointshape = 21,
pointsize = 2,
fill.ind = mva_data$Geno,
col.ind = "black",
col.var = "blue",
legend.title = "Genotypes",
repel = TRUE)
biplot <- biplot +
geom_point(aes(x = pca$x[,1], y = pca$x[,2], shape = mva_data$Geno, color= mva_data$Geno), size=2, stroke = 1.5)
biplot
# Step 1: Prepare the Data
clust_data <- mva_data[, -1]
# Step 2: Aggregate Data by Genotype
clust_data_agg <- clust_data %>%
group_by(Geno) %>%
summarise(across(where(is.numeric), mean, na.rm = TRUE))
# Step 3: Standardize the Numerical Data
clust_data_scaled <- clust_data_agg %>%
mutate(across(where(is.numeric), scale))
# Step 4: Calculate the Distance Matrix
dist_matrix <- dist(clust_data_scaled, method = "euclidean")
# Step 5: Perform Hierarchical Clustering
hc <- hclust(dist_matrix)
# Step 6: Convert to dendrogram data
dendro_data <- ggdendro::dendro_data(hc)
# Create the dendrogram plot
dendrogram_plot <- ggplot(width = 12) +  # Adjust the width of the plot
geom_segment(data = dendro_data$segments, aes(x = x, y = y, xend = xend, yend = yend), size = .4, color = "#8cbf13") +
geom_text(data = dendro_data$labels, aes(x = x, y = y, label = label), hjust = -0.1, size = 3) +
geom_hline(yintercept = 8, linetype = "dashed", color = "blue", size = .3)+
theme_minimal() +
labs(title = "Dendrogram Using Agglomerative Clustering Method", x = "", y = "Height") +
theme(axis.text.x = element_blank(),
axis.ticks.x = element_blank())
ggsave("./images/dendogram/dendogram_plot.png", plot = dendrogram_plot, width = 12, height = 8, dpi = 600)
dendrogram_plot
clust_data <- mva_data[, -1]
clust_data_agg <- clust_data %>%
group_by(Geno) %>%
summarise(across(where(is.numeric), mean, na.rm = TRUE))
clust_data_scaled <- clust_data_agg %>%
mutate(across(where(is.numeric), scale))
dist_matrix <- dist(clust_data_scaled, method = "euclidean")
hc <- hclust(dist_matrix)
num_clusters <- 4
cluster_membership <- cutree(hc, k = num_clusters)
clust_data_agg <- clust_data_agg %>%
mutate(Cluster = cluster_membership)
table(clust_data_agg$Geno, clust_data_agg$Cluster)
knitr::opts_chunk$set(echo = TRUE)
library(agricolae)
library(dendextend)
library(dplyr)
library(ggplot2)
library(pheatmap)
library(metan)
library(stats)
library(MASS)
library(factoextra)
library(gridExtra)
library(gt)
library(psych)
library(ggdendro)
library(tidyverse)
mva_data <- read.csv("./data/mva.csv",header = TRUE)
anova_data <- read.csv("./data/anova.csv", header = TRUE)
# initial_data <- read.csv("./data/initial.csv, header = TRUE")
boxplot_data <- read.csv("./data/boxplot.csv", header = TRUE)
anova_data %>%
str()
anova_data$Rep <- as.factor(anova_data$Rep)
anova_data$Treat <- as.factor(anova_data$Treat)
anova_data$Geno <- as.factor(anova_data$Geno)
anova_data %>%
str()
summary(anova_data[,-c(1,2,3)])
variables <- names(anova_data)
for(i in 4:11){
output <- paste0(variables[i]," : ", sd(anova_data[,i]) %>% round(3))
print(output)
}
variables <- names(anova_data)
variables <- variables[4:11]
for(var in variables){
print(paste0("Anova for: ", var))
formula <- as.formula(paste(var, "~Rep+Treat+Geno"))
model <- aov(formula, data = anova_data)
print("anova result : ------------------------")
print(summary(model))
}
box_data <- read.csv("./data/Boxplot_edited2.csv", header = T)
str(box_data)
box_data$Geno <- as.factor(box_data$Geno)
box_data$Rep <- as.factor(box_data$Rep)
box_data$Treat <- as.factor(box_data$Treat)
variables <- names(box_data)[4:11]
path <- getwd()
output_dir <- paste0(path, "/images/boxplots/")
if(!dir.exists(output_dir)){
dir.create(output_dir, recursive = TRUE)
}
knitr::opts_chunk$set(echo = TRUE)
library(agricolae)
library(dendextend)
library(dplyr)
library(ggplot2)
library(pheatmap)
library(metan)
library(stats)
library(MASS)
library(factoextra)
library(gridExtra)
library(gt)
library(psych)
library(ggdendro)
library(tidyverse)
mva_data <- read.csv("./data/mva.csv",header = TRUE)
anova_data <- read.csv("./data/anova.csv", header = TRUE)
# initial_data <- read.csv("./data/initial.csv, header = TRUE")
boxplot_data <- read.csv("./data/boxplot.csv", header = TRUE)
anova_data %>%
str()
anova_data$Rep <- as.factor(anova_data$Rep)
anova_data$Treat <- as.factor(anova_data$Treat)
anova_data$Geno <- as.factor(anova_data$Geno)
anova_data %>%
str()
summary(anova_data[,-c(1,2,3)])
variables <- names(anova_data)
for(i in 4:11){
output <- paste0(variables[i]," : ", sd(anova_data[,i]) %>% round(3))
print(output)
}
variables <- names(anova_data)
variables <- variables[4:11]
for(var in variables){
print(paste0("Anova for: ", var))
formula <- as.formula(paste(var, "~Rep+Treat+Geno"))
model <- aov(formula, data = anova_data)
print("anova result : ------------------------")
print(summary(model))
}
box_data <- read.csv("./data/Boxplot_edited2.csv", header = T)
str(box_data)
box_data$Geno <- as.factor(box_data$Geno)
box_data$Rep <- as.factor(box_data$Rep)
box_data$Treat <- as.factor(box_data$Treat)
variables <- names(box_data)[4:11]
path <- getwd()
output_dir <- paste0(path, "/images/boxplots/")
if(!dir.exists(output_dir)){
dir.create(output_dir, recursive = TRUE)
}
for (var in variables) {
formula <- as.formula(paste0(var, " ~ Treat"))
print(paste("Boxplot for: ", var))
p <- ggplot(box_data, aes_string(x = "Treat", y = var)) +
geom_boxplot(fill = "#8cbf13", color = "black", outlier.color = "red", outlier.shape = 16, outlier.size = 2) +
labs(x = " ", y = var) +
theme_minimal(base_size = 15) +  # Use a minimal theme with larger base font size
theme(
axis.text.x = element_text(hjust = 1),
panel.background = element_rect(fill = "white"),
plot.background = element_rect(fill = "white"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank()
)
file_name_box <- paste0(output_dir, var, ".png")
ggsave(file_name_box, plot = p, width = 9, height = 6, dpi = 300)
p
}
mva_data %>%
head()
mva_data %>%
str()
mva_data$Rep <- as.factor(mva_data$Rep)
mva_data$Geno <- as.factor(mva_data$Geno)
pca <- prcomp(mva_data[,-c(1,2)], center = TRUE, scale = TRUE)
print(summary(pca))
print(names(pca))
pca$rotation
pca$x
principal_comps <- pca$x
correlations <- cor(mva_data[,-c(1,2)], principal_comps)
print(correlations)
eigenvalues <- pca$sdev^2
explained_variance <- eigenvalues/sum(eigenvalues)*100
scree_data <- data.frame(
PC = paste0("PC", 1:length(explained_variance)),
variance = explained_variance
)
hline_value = 3
scree_plot <- ggplot(scree_data, aes(x = PC, y = variance))+
geom_bar(stat = "identity", fill = "#8cbf13")+
geom_text(aes(label = round(variance,1)), vjust = -0.5)+
geom_line(aes(x = 1:length(pca$sdev),y = pca$sdev^2/sum(pca$sdev^2)*100),color = "blue", size =0.4 )+
geom_hline(yintercept = hline_value,linetype = "dashed", color = "red",lwd = 0.4)+
xlab("Principal Component")+
ylab("Percentage of variance Explained")+
ggtitle("Scree Plot")
ggsave("./images/scree_plot/scree_plot.png", scree_plot,width = 12, height = 8, dpi = 600)
scree_plot
biplot <- fviz_pca_biplot(pca,
geom.ind = "point",
pointshape = 21,
pointsize = 2,
fill.ind = mva_data$Geno,
col.ind = "black",
col.var = "blue",
legend.title = "Genotypes",
repel = TRUE)
biplot <- biplot +
geom_point(aes(x = pca$x[,1], y = pca$x[,2], shape = mva_data$Geno, color= mva_data$Geno), size=2, stroke = 1.5)
biplot
# Step 1: Prepare the Data
clust_data <- mva_data[, -1]
# Step 2: Aggregate Data by Genotype
clust_data_agg <- clust_data %>%
group_by(Geno) %>%
summarise(across(where(is.numeric), mean, na.rm = TRUE))
# Step 3: Standardize the Numerical Data
clust_data_scaled <- clust_data_agg %>%
mutate(across(where(is.numeric), scale))
# Step 4: Calculate the Distance Matrix
dist_matrix <- dist(clust_data_scaled, method = "euclidean")
# Step 5: Perform Hierarchical Clustering
hc <- hclust(dist_matrix)
# Step 6: Convert to dendrogram data
dendro_data <- ggdendro::dendro_data(hc)
# Create the dendrogram plot
dendrogram_plot <- ggplot(width = 12) +  # Adjust the width of the plot
geom_segment(data = dendro_data$segments, aes(x = x, y = y, xend = xend, yend = yend), size = .4, color = "#8cbf13") +
geom_text(data = dendro_data$labels, aes(x = x, y = y, label = label), hjust = -0.1, size = 3) +
geom_hline(yintercept = 8, linetype = "dashed", color = "blue", size = .3)+
theme_minimal() +
labs(title = "Dendrogram Using Agglomerative Clustering Method", x = "", y = "Height") +
theme(axis.text.x = element_blank(),
axis.ticks.x = element_blank())
ggsave("./images/dendogram/dendogram_plot.png", plot = dendrogram_plot, width = 12, height = 8, dpi = 600)
dendrogram_plot
clust_data <- mva_data[, -1]
clust_data_agg <- clust_data %>%
group_by(Geno) %>%
summarise(across(where(is.numeric), mean, na.rm = TRUE))
clust_data_scaled <- clust_data_agg %>%
mutate(across(where(is.numeric), scale))
dist_matrix <- dist(clust_data_scaled, method = "euclidean")
hc <- hclust(dist_matrix)
num_clusters <- 4
cluster_membership <- cutree(hc, k = num_clusters)
clust_data_agg <- clust_data_agg %>%
mutate(Cluster = cluster_membership)
table(clust_data_agg$Geno, clust_data_agg$Cluster)
head(clust_data)
head(clust_data_agg)
head(clust_data_agg)
mean(clust_data_agg$LN~clust_data_agg$Cluster)
clust_data_agg$Cluster <- as.factor(clust_data_agg$Cluster)
mean(clust_data_agg$LN~clust_data_agg$Cluster)
levels(clust_data_agg)
levels(clust_data_agg$Cluster)
clust_data_agg %>%
filter(Cluster = 1) %>%
head()
clust_data_agg %>%
filter(Cluster == 1) %>%
head()
for(i in groups){
clust_data_agg[,-1] %>%
filter(Cluster == i) %>%
head()
}
groups <- c(1,2,3,4)
for(i in groups){
clust_data_agg[,-1] %>%
filter(Cluster == i) %>%
head()
}
for(i in groups){
clust_data_agg[,-1] %>%
filter(Cluster == i) %>%
print(head())
}
for(i in groups){
clust_data_agg[,-1] %>%
filter(Cluster == i) %>%
print(mean())
}
for(i in groups){
clust_data_agg[,-1] %>%
filter(Cluster == i) %>%
print(summary())
}
groups <- c(1,2,3,4)
for(i in groups){
clust_data_agg[,-1] %>%
filter(Cluster == i) %>%
print(summary())
}
summary(clust_data_agg)
clust_data_agg %>%
filter(Cluster == 1) %>%
summary()
clust_data_agg %>%
filter(Cluster == 1) %>%
print(summary())
for(i in groups){
clust_data_agg[,-1] %>%
filter(Cluster == i) %>%
summary()
}
groups <- c(1,2,3,4)
for(i in groups){
summ <- clust_data_agg[,-1] %>%
filter(Cluster == i) %>%
summary()
print(summ)
}
groups <- c(1,2,3,4)
for(i in groups){
summ <- clust_data_agg[,-1] %>%
filter(Cluster == i) %>%
summary()
print(summ)
}
groups <- c(1,2,3,4)
for(i in groups){
summ <- clust_data_agg[,-1] %>%
filter(Cluster == i) %>%
summary()
print(paste0("Summary of Cluster number: ",i))
print(summ)
}
View(clust_data_agg)
install.packages("lme4")
knitr::opts_chunk$set(echo = TRUE)
library(lme4)
head(anova_data)
model <- lmer(anova_data$LN~anova_data$Geno+(1|anova_data$Rep)+(1|anova_data$Geno:anova_data$Rep))
model <- lmer(LN~Geno+(1|Rep)+(1|Geno:Rep, data = anova_data))
model <- lmer(LN~Geno+(1|Rep)+(1|Geno:Rep),data = anova_data)
model
summary(model)
VarCorr(model)
install.packages("lsmeans")
library(lsmeans)
lsm <- lsmeans(model, ~Geno)
summary(lsm)
predicted <- predict(model)
predicted
anova_data$predicted <- predicted
head(anova_data)
sink("linextesteroutput.txt")
with(anova_data,lineXtester(Rep, Treat, Geno, LN))
library(agricolae)
sink("linextesteroutput.txt")
with(anova_data,lineXtester(Rep, Treat, Geno, LN))
sink()
sink("linextesteroutput.txt")
with(anova_data,lineXtester(Rep, Geno, LN))
sink()
groups <- c(1,2,3,4)
for(i in groups){
summ <- clust_data_agg[,-1] %>%
filter(Cluster == i) %>%
summary()
print(paste0("Summary of Cluster number: ",i))
print(summ)
}
library(agricolae)
library(dendextend)
library(dplyr)
library(ggplot2)
library(pheatmap)
library(metan)
library(stats)
library(MASS)
library(factoextra)
library(gridExtra)
library(gt)
library(psych)
library(ggdendro)
library(tidyverse)
library(lme4)
library(lsmeans)
groups <- c(1,2,3,4)
for(i in groups){
summ <- clust_data_agg[,-1] %>%
filter(Cluster == i) %>%
summary()
print(paste0("Summary of Cluster number: ",i))
print(summ)
}
groups <- c(1,2,3,4)
for(i in groups){
summ <- clust_data_agg[,-1] %>%
filter(Cluster == i) %>%
summary()
print(paste0("Summary of Cluster number: ",i))
print(summ)
}
groups <- c(1,2,3,4)
for(i in groups){
summ <- clust_data_agg[,-1] %>%
filter(Cluster == i) %>%
summary()
print(paste0("Summary of Cluster number: ",i))
print(summ)
}
clust_data_agg %>%
filter(Cluster == 1) %>%
print(summary())
