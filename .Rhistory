# Step 6: Convert to dendrogram data
dendro_data <- ggdendro::dendro_data(hc)
# Create the dendrogram plot
ggplot(width = 12) +  # Adjust the width of the plot
geom_segment(data = dendro_data$segments, aes(x = x, y = y, xend = xend, yend = yend), size = 1, color = "steelblue") +
geom_text(data = dendro_data$labels, aes(x = x, y = y, label = label), hjust = -0.1, size = 3) +
theme_minimal() +
labs(title = "Dendrogram Based on Genotypes and Measurements", x = "", y = "Height") +
theme(axis.text.x = element_blank(),
axis.ticks.x = element_blank())
# Step 1: Prepare the Data
clust_data <- mva_data[, -1]
# Step 2: Aggregate Data by Genotype
clust_data_agg <- clust_data %>%
group_by(Geno) %>%
summarise(across(where(is.numeric), mean, na.rm = TRUE))
# Step 3: Standardize the Numerical Data
clust_data_scaled <- clust_data_agg %>%
mutate(across(where(is.numeric), scale))
# Step 4: Calculate the Distance Matrix
dist_matrix <- dist(clust_data_scaled, method = "euclidean")
# Step 5: Perform Hierarchical Clustering
hc <- hclust(dist_matrix)
# Step 6: Convert to dendrogram data
dendro_data <- ggdendro::dendro_data(hc)
# Create the dendrogram plot
ggplot(width = 12) +  # Adjust the width of the plot
geom_segment(data = dendro_data$segments, aes(x = x, y = y, xend = xend, yend = yend), size = 1, color = "steelblue") +
geom_text(data = dendro_data$labels, aes(x = x, y = y, label = label), hjust = -0.1, size = 3) +
theme_minimal() +
labs(title = "Dendrogram Based on Genotypes and Measurements", x = "", y = "Height") +
theme(axis.text.x = element_blank(),
axis.ticks.x = element_blank())
# Step 1: Prepare the Data
clust_data <- mva_data[, -1]
# Step 2: Aggregate Data by Genotype
clust_data_agg <- clust_data %>%
group_by(Geno) %>%
summarise(across(where(is.numeric), mean, na.rm = TRUE))
# Step 3: Standardize the Numerical Data
clust_data_scaled <- clust_data_agg %>%
mutate(across(where(is.numeric), scale))
# Step 4: Calculate the Distance Matrix
dist_matrix <- dist(clust_data_scaled, method = "euclidean")
# Step 5: Perform Hierarchical Clustering
hc <- hclust(dist_matrix)
# Step 6: Convert to dendrogram data
dendro_data <- ggdendro::dendro_data(hc)
# Create the dendrogram plot
ggplot(width = 12) +  # Adjust the width of the plot
geom_segment(data = dendro_data$segments, aes(x = x, y = y, xend = xend, yend = yend), size = 1, color = "steelblue") +
geom_text(data = dendro_data$labels, aes(x = x, y = y, label = label), hjust = -0.1, size = 3) +
geom_hline(yintercept = 8, linetype = "dashed", color = "blue", size = 1)+
theme_minimal() +
labs(title = "Dendrogram Based on Genotypes and Measurements", x = "", y = "Height") +
theme(axis.text.x = element_blank(),
axis.ticks.x = element_blank())
# One-hot encoding of the Genotype variable
data_encoded <- data %>%
select(Geno) %>%  # Exclude other variables for clustering
mutate(Count = 1) %>%      # Create a count column for one-hot encoding
pivot_wider(names_from = Genotype, values_from = Count, values_fill = 0)
# One-hot encoding of the Genotype variable
data_encoded <- data %>%
select(Geno) %>%  # Exclude other variables for clustering
mutate(Count = 1) %>%      # Create a count column for one-hot encoding
pivot_wider(names_from = Genotype, values_from = Count, values_fill = 0)
# Step 1: Prepare the Data
clust_data <- mva_data[, -1]
# Step 2: Aggregate Data by Genotype
clust_data_agg <- clust_data %>%
group_by(Geno) %>%
summarise(across(where(is.numeric), mean, na.rm = TRUE))
# Step 3: Standardize the Numerical Data
clust_data_scaled <- clust_data_agg %>%
mutate(across(where(is.numeric), scale))
# Step 4: Calculate the Distance Matrix
dist_matrix <- dist(clust_data_scaled, method = "euclidean")
# Step 5: Perform Hierarchical Clustering
hc <- hclust(dist_matrix)
# Step 6: Convert to dendrogram data
dendro_data <- ggdendro::dendro_data(hc)
# Create the dendrogram plot
dendrogram_plot <- ggplot(width = 12) +  # Adjust the width of the plot
geom_segment(data = dendro_data$segments, aes(x = x, y = y, xend = xend, yend = yend), size = 1, color = "steelblue") +
geom_text(data = dendro_data$labels, aes(x = x, y = y, label = label), hjust = -0.1, size = 3) +
geom_hline(yintercept = 8, linetype = "dashed", color = "blue", size = 1)+
theme_minimal() +
labs(title = "Dendrogram Based on Genotypes and Measurements", x = "", y = "Height") +
theme(axis.text.x = element_blank(),
axis.ticks.x = element_blank())
ggsave("./images/dendogram/dendogram_plot.png", plot = dendrogram_plot, width = 12, height = 8, dpi = 600)
dendrogram_plot
# Step 1: Prepare the Data
clust_data <- mva_data[, -1]
# Step 2: Aggregate Data by Genotype
clust_data_agg <- clust_data %>%
group_by(Geno) %>%
summarise(across(where(is.numeric), mean, na.rm = TRUE))
# Step 3: Standardize the Numerical Data
clust_data_scaled <- clust_data_agg %>%
mutate(across(where(is.numeric), scale))
# Step 4: Calculate the Distance Matrix
dist_matrix <- dist(clust_data_scaled, method = "euclidean")
# Step 5: Perform Hierarchical Clustering
hc <- hclust(dist_matrix)
# Step 6: Convert to dendrogram data
dendro_data <- ggdendro::dendro_data(hc)
# Create the dendrogram plot
dendrogram_plot <- ggplot(width = 12) +  # Adjust the width of the plot
geom_segment(data = dendro_data$segments, aes(x = x, y = y, xend = xend, yend = yend), size = 1, color = "steelblue") +
geom_text(data = dendro_data$labels, aes(x = x, y = y, label = label), hjust = -0.1, size = 3) +
geom_hline(yintercept = 8, linetype = "dashed", color = "blue", size = .4)+
theme_minimal() +
labs(title = "Dendrogram Based on Genotypes and Measurements", x = "", y = "Height") +
theme(axis.text.x = element_blank(),
axis.ticks.x = element_blank())
ggsave("./images/dendogram/dendogram_plot.png", plot = dendrogram_plot, width = 12, height = 8, dpi = 600)
dendrogram_plot
clust_data_agg <- clust_data %>%
group_by(Geno) %>%
summarise(across(where(is.numeric), mean, na.rm = TRUE))
clust_data <- mva_data[, -1]
clust_data_agg <- clust_data %>%
group_by(Geno) %>%
summarise(across(where(is.numeric), mean, na.rm = TRUE))
clust_data <- mva_data[, -1]
clust_data_agg <- clust_data %>%
group_by(Geno) %>%
summarise(across(where(is.numeric), mean, na.rm = TRUE))
clust_data_scaled <- clust_data_agg %>%
mutate(across(where(is.numeric), scale))
dist_matrix <- dist(clust_data_scaled, method = "euclidean")
hc <- hclust(dist_matrix)
num_clusters <- 4
cluster_membership <- cutree(hc, k = num_clusters)
clust_data_agg <- clust_data_agg %>%
mutate(Cluster = cluster_membership)
table(clust_data_agg$Geno, clust_data_agg$Cluster)
names(clust_data_agg)
str(clust_data_agg)
table(clust_data_agg$Geno,clust_data_agg$Cluster)
library(agricolae)
library(dendextend)
library(dplyr)
library(ggplot2)
library(pheatmap)
library(metan)
library(stats)
library(MASS)
library(factoextra)
library(gridExtra)
library(gt)
library(psych)
library(ggdendro)
library(tidyverse)
box_data <- read.csv("./data/Boxplot_edited2.csv", header = T)
str(box_data)
box_data$Geno <- as.factor(box_data$Geno)
box_data$Rep <- as.factor(box_data$Rep)
box_data$Treat <- as.factor(box_data$Treat)
box_data$Geno <- as.factor(box_data$Geno)
box_data$Rep <- as.factor(box_data$Rep)
box_data$Treat <- as.factor(box_data$Treat)
box_data <- read.csv("./data/Boxplot_edited2.csv", header = T)
str(box_data)
box_data <- read.csv("./data/Boxplot_edited2.csv", header = T)
str(box_data)
box_data$Geno <- as.factor(box_data$Geno)
box_data$Rep <- as.factor(box_data$Rep)
box_data$Treat <- as.factor(box_data$Treat)
str(box_data)
names(box_data)
dim(box_data)
variables <- names(box_data)[4:11]
path <- getwd()
output_dir <- paste0(path, "/images/boxplots/")
if(!dir.exists(output_dir)){
dir.create(output_dir, recursive = TRUE)
}
for(var in variables){
formula <- as.formula(paste0(var ,"~ Treat"))
print(paste("Boxplot for : ", var))
file_name_box <- paste0(output_dir,var ,".png")
jpeg(filename = file_name_box, width = 900, height = 600, quality = 600)
par(mar = c(5,4,4,2)+0.3)
boxplot(formula, col = 5, data = box_data)
dev.off()
boxplot(formula, col = 5, data = box_data)
}
for (var in variables) {
formula <- as.formula(paste0(var, " ~ Treat"))
print(paste("Boxplot for: ", var))
# Create the boxplot using ggplot2
p <- ggplot(box_data, aes_string(x = "Treat", y = var)) +
geom_boxplot(fill = "steelblue", color = "black", outlier.color = "red", outlier.shape = 16, outlier.size = 2) +
labs(title = paste("Boxplot of", var, "by Treatment"), x = "Treatment", y = var) +
theme_minimal(base_size = 15) +  # Use a minimal theme with larger base font size
theme(
plot.title = element_text(hjust = 0.5, size = 18, face = "bold"),  # Center title and make it bold
axis.text.x = element_text(angle = 45, hjust = 1),  # Rotate x-axis text for better readability
panel.grid.major = element_line(color = "grey80"),  # Customize grid lines
panel.grid.minor = element_blank()  # Remove minor grid lines
)
# Save the plot as a PNG file
file_name_box <- paste0(output_dir, var, "/ggplot.png")
ggsave(file_name_box, plot = p, width = 9, height = 6, dpi = 300)
}
for (var in variables) {
formula <- as.formula(paste0(var, " ~ Treat"))
print(paste("Boxplot for: ", var))
# Create the boxplot using ggplot2
p <- ggplot(box_data, aes_string(x = "Treat", y = var)) +
geom_boxplot(fill = "steelblue", color = "black", outlier.color = "red", outlier.shape = 16, outlier.size = 2) +
labs(title = paste("Boxplot of", var, "by Treatment"), x = "Treatment", y = var) +
theme_minimal(base_size = 15) +  # Use a minimal theme with larger base font size
theme(
plot.title = element_text(hjust = 0.5, size = 18, face = "bold"),  # Center title and make it bold
axis.text.x = element_text(angle = 45, hjust = 1),  # Rotate x-axis text for better readability
panel.grid.major = element_line(color = "grey80"),  # Customize grid lines
panel.grid.minor = element_blank()  # Remove minor grid lines
)
# Save the plot as a PNG file
file_name_box <- paste0(output_dir, var, "/ggplot/",var.png")
ggsave(file_name_box, plot = p, width = 9, height = 6, dpi = 300)
}
for (var in variables) {
formula <- as.formula(paste0(var, " ~ Treat"))
print(paste("Boxplot for: ", var))
# Create the boxplot using ggplot2
p <- ggplot(box_data, aes_string(x = "Treat", y = var)) +
geom_boxplot(fill = "steelblue", color = "black", outlier.color = "red", outlier.shape = 16, outlier.size = 2) +
labs(title = paste("Boxplot of", var, "by Treatment"), x = "Treatment", y = var) +
theme_minimal(base_size = 15) +  # Use a minimal theme with larger base font size
theme(
plot.title = element_text(hjust = 0.5, size = 18, face = "bold"),  # Center title and make it bold
axis.text.x = element_text(angle = 45, hjust = 1),  # Rotate x-axis text for better readability
panel.grid.major = element_line(color = "grey80"),  # Customize grid lines
panel.grid.minor = element_blank()  # Remove minor grid lines
)
# Save the plot as a PNG file
file_name_box <- paste0(output_dir, var, ".png")
ggsave(file_name_box, plot = p, width = 9, height = 6, dpi = 300)
}
for (var in variables) {
formula <- as.formula(paste0(var, " ~ Treat"))
print(paste("Boxplot for: ", var))
# Create the boxplot using ggplot2
p <- ggplot(box_data, aes_string(x = "Treat", y = var)) +
geom_boxplot(fill = "#8cbf13", color = "black", outlier.color = "red", outlier.shape = 16, outlier.size = 2) +
labs(title = paste("Boxplot of", var, "by Treatment"), x = "Treatment", y = var) +
theme_minimal(base_size = 15) +  # Use a minimal theme with larger base font size
theme(
plot.title = element_text(hjust = 0.5, size = 18, face = "bold"),  # Center title and make it bold
axis.text.x = element_text(angle = 45, hjust = 1),  # Rotate x-axis text for better readability
panel.grid.major = element_line(color = "grey80"),  # Customize grid lines
panel.grid.minor = element_blank()  # Remove minor grid lines
)
# Save the plot as a PNG file
file_name_box <- paste0(output_dir, var, ".png")
ggsave(file_name_box, plot = p, width = 9, height = 6, dpi = 300)
}
for (var in variables) {
formula <- as.formula(paste0(var, " ~ Treat"))
print(paste("Boxplot for: ", var))
# Create the boxplot using ggplot2
p <- ggplot(box_data, aes_string(x = "Treat", y = var)) +
geom_boxplot(fill = "#8cbf13", color = "black", outlier.color = "red", outlier.shape = 16, outlier.size = 2) +
labs(title = paste("Boxplot of", var, "by Treatment"), x = "Treatment", y = var) +
theme_minimal(base_size = 15) +  # Use a minimal theme with larger base font size
theme(
axis.text.x = element_text(hjust = 1),  # Rotate x-axis text for better readability
panel.grid.major = element_line(color = "grey80"),  # Customize grid lines
panel.grid.minor = element_blank()  # Remove minor grid lines
)
# Save the plot as a PNG file
file_name_box <- paste0(output_dir, var, ".png")
ggsave(file_name_box, plot = p, width = 9, height = 6, dpi = 300)
}
for (var in variables) {
formula <- as.formula(paste0(var, " ~ Treat"))
print(paste("Boxplot for: ", var))
# Create the boxplot using ggplot2
p <- ggplot(box_data, aes_string(x = "Treat", y = var)) +
geom_boxplot(fill = "#8cbf13", color = "black", outlier.color = "red", outlier.shape = 16, outlier.size = 2) +
labs( y = var) +
theme_minimal(base_size = 15) +  # Use a minimal theme with larger base font size
theme(
axis.text.x = element_text(hjust = 1),  # Rotate x-axis text for better readability
panel.grid.major = element_line(color = "grey80"),  # Customize grid lines
panel.grid.minor = element_blank()  # Remove minor grid lines
)
# Save the plot as a PNG file
file_name_box <- paste0(output_dir, var, ".png")
ggsave(file_name_box, plot = p, width = 9, height = 6, dpi = 300)
}
for (var in variables) {
formula <- as.formula(paste0(var, " ~ Treat"))
print(paste("Boxplot for: ", var))
# Create the boxplot using ggplot2
p <- ggplot(box_data, aes_string(x = "Treat", y = var)) +
geom_boxplot(fill = "#8cbf13", color = "black", outlier.color = "red", outlier.shape = 16, outlier.size = 2) +
labs(x = " ", y = var) +
theme_minimal(base_size = 15) +  # Use a minimal theme with larger base font size
theme(
axis.text.x = element_text(hjust = 1),  # Rotate x-axis text for better readability
panel.background = element_rect(fill = "white"),  # Set panel background to white
plot.background = element_rect(fill = "white"),  # Set plot background to white
panel.grid.major = element_line(color = "grey80"),  # Customize grid lines
panel.grid.minor = element_blank()  # Remove minor grid lines
)
# Save the plot as a PNG file
file_name_box <- paste0(output_dir, var, ".png")
ggsave(file_name_box, plot = p, width = 9, height = 6, dpi = 300)
}
for (var in variables) {
formula <- as.formula(paste0(var, " ~ Treat"))
print(paste("Boxplot for: ", var))
# Create the boxplot using ggplot2
p <- ggplot(box_data, aes_string(x = "Treat", y = var)) +
geom_boxplot(fill = "#8cbf13", color = "black", outlier.color = "red", outlier.shape = 16, outlier.size = 2) +
labs(x = " ", y = var) +
theme_minimal(base_size = 15) +  # Use a minimal theme with larger base font size
theme(
axis.text.x = element_text(hjust = 1),  # Rotate x-axis text for better readability
panel.background = element_rect(fill = "white"),  # Set panel background to white
plot.background = element_rect(fill = "white"),  # Set plot background to white
panel.grid.major = element_blank(),  # Remove major grid lines
panel.grid.minor = element_blank()   # Remove minor grid lines
)
# Save the plot as a PNG file
file_name_box <- paste0(output_dir, var, ".png")
ggsave(file_name_box, plot = p, width = 9, height = 6, dpi = 300)
}
eigenvalues <- pca$sdev^2
explained_variance <- eigenvalues/sum(eigenvalues)*100
scree_data <- data.frame(
PC = paste0("PC", 1:length(explained_variance)),
variance = explained_variance
)
hline_value = 3
scree_plot <- ggplot(scree_data, aes(x = PC, y = variance))+
geom_bar(stat = "identity", fill = "#8cbf13")+
geom_text(aes(label = round(variance,1)), vjust = -0.5)+
geom_line(aes(x = 1:length(pca$sdev),y = pca$sdev^2/sum(pca$sdev^2)*100),color = "blue", size =1 )+
geom_hline(yintercept = hline_value,linetype = "dashed", color = "red",lwd = 1)+
xlab("Principal Component")+
ylab("Percentage of variance Explained")+
ggtitle("Scree Plot")
ggsave("./images/scree_plot/scree_plot,png", scree_plot,width = 12, height = 8, dpi = 600)
eigenvalues <- pca$sdev^2
explained_variance <- eigenvalues/sum(eigenvalues)*100
scree_data <- data.frame(
PC = paste0("PC", 1:length(explained_variance)),
variance = explained_variance
)
hline_value = 3
scree_plot <- ggplot(scree_data, aes(x = PC, y = variance))+
geom_bar(stat = "identity", fill = "#8cbf13")+
geom_text(aes(label = round(variance,1)), vjust = -0.5)+
geom_line(aes(x = 1:length(pca$sdev),y = pca$sdev^2/sum(pca$sdev^2)*100),color = "blue", size =1 )+
geom_hline(yintercept = hline_value,linetype = "dashed", color = "red",lwd = 1)+
xlab("Principal Component")+
ylab("Percentage of variance Explained")+
ggtitle("Scree Plot")
ggsave("./images/scree_plot/scree_plot,png", scree_plot,width = 12, height = 8, dpi = 600)
getwd()
eigenvalues <- pca$sdev^2
explained_variance <- eigenvalues/sum(eigenvalues)*100
scree_data <- data.frame(
PC = paste0("PC", 1:length(explained_variance)),
variance = explained_variance
)
hline_value = 3
scree_plot <- ggplot(scree_data, aes(x = PC, y = variance))+
geom_bar(stat = "identity", fill = "#8cbf13")+
geom_text(aes(label = round(variance,1)), vjust = -0.5)+
geom_line(aes(x = 1:length(pca$sdev),y = pca$sdev^2/sum(pca$sdev^2)*100),color = "blue", size =1 )+
geom_hline(yintercept = hline_value,linetype = "dashed", color = "red",lwd = 1)+
xlab("Principal Component")+
ylab("Percentage of variance Explained")+
ggtitle("Scree Plot")
ggsave("./images/scree_plot/scree_plot.png", scree_plot,width = 12, height = 8, dpi = 600)
eigenvalues <- pca$sdev^2
explained_variance <- eigenvalues/sum(eigenvalues)*100
scree_data <- data.frame(
PC = paste0("PC", 1:length(explained_variance)),
variance = explained_variance
)
hline_value = 3
scree_plot <- ggplot(scree_data, aes(x = PC, y = variance))+
geom_bar(stat = "identity", fill = "#8cbf13")+
geom_text(aes(label = round(variance,1)), vjust = -0.5)+
geom_line(aes(x = 1:length(pca$sdev),y = pca$sdev^2/sum(pca$sdev^2)*100),color = "blue", size =1 )+
geom_hline(yintercept = hline_value,linetype = "dashed", color = "red",lwd = 1)+
xlab("Principal Component")+
ylab("Percentage of variance Explained")+
ggtitle("Scree Plot")
ggsave("./images/scree_plot/scree_plot.png", scree_plot,width = 12, height = 8, dpi = 600)
scree_plot
eigenvalues <- pca$sdev^2
explained_variance <- eigenvalues/sum(eigenvalues)*100
scree_data <- data.frame(
PC = paste0("PC", 1:length(explained_variance)),
variance = explained_variance
)
hline_value = 3
scree_plot <- ggplot(scree_data, aes(x = PC, y = variance))+
geom_bar(stat = "identity", fill = "#8cbf13")+
geom_text(aes(label = round(variance,1)), vjust = -0.5)+
geom_line(aes(x = 1:length(pca$sdev),y = pca$sdev^2/sum(pca$sdev^2)*100),color = "blue", size =0.4 )+
geom_hline(yintercept = hline_value,linetype = "dashed", color = "red",lwd = 1)+
xlab("Principal Component")+
ylab("Percentage of variance Explained")+
ggtitle("Scree Plot")
ggsave("./images/scree_plot/scree_plot.png", scree_plot,width = 12, height = 8, dpi = 600)
scree_plot
eigenvalues <- pca$sdev^2
explained_variance <- eigenvalues/sum(eigenvalues)*100
scree_data <- data.frame(
PC = paste0("PC", 1:length(explained_variance)),
variance = explained_variance
)
hline_value = 3
scree_plot <- ggplot(scree_data, aes(x = PC, y = variance))+
geom_bar(stat = "identity", fill = "#8cbf13")+
geom_text(aes(label = round(variance,1)), vjust = -0.5)+
geom_line(aes(x = 1:length(pca$sdev),y = pca$sdev^2/sum(pca$sdev^2)*100),color = "blue", size =0.4 )+
geom_hline(yintercept = hline_value,linetype = "dashed", color = "red",lwd = 0.4)+
xlab("Principal Component")+
ylab("Percentage of variance Explained")+
ggtitle("Scree Plot")
ggsave("./images/scree_plot/scree_plot.png", scree_plot,width = 12, height = 8, dpi = 600)
scree_plot
# Step 1: Prepare the Data
clust_data <- mva_data[, -1]
# Step 2: Aggregate Data by Genotype
clust_data_agg <- clust_data %>%
group_by(Geno) %>%
summarise(across(where(is.numeric), mean, na.rm = TRUE))
# Step 3: Standardize the Numerical Data
clust_data_scaled <- clust_data_agg %>%
mutate(across(where(is.numeric), scale))
# Step 4: Calculate the Distance Matrix
dist_matrix <- dist(clust_data_scaled, method = "euclidean")
# Step 5: Perform Hierarchical Clustering
hc <- hclust(dist_matrix)
# Step 6: Convert to dendrogram data
dendro_data <- ggdendro::dendro_data(hc)
# Create the dendrogram plot
dendrogram_plot <- ggplot(width = 12) +  # Adjust the width of the plot
geom_segment(data = dendro_data$segments, aes(x = x, y = y, xend = xend, yend = yend), size = .4, color = "#8cbf13") +
geom_text(data = dendro_data$labels, aes(x = x, y = y, label = label), hjust = -0.1, size = 3) +
geom_hline(yintercept = 8, linetype = "dashed", color = "blue", size = .4)+
theme_minimal() +
labs(title = "Dendrogram Based on Genotypes and Measurements", x = "", y = "Height") +
theme(axis.text.x = element_blank(),
axis.ticks.x = element_blank())
ggsave("./images/dendogram/dendogram_plot.png", plot = dendrogram_plot, width = 12, height = 8, dpi = 600)
dendrogram_plot
# Step 1: Prepare the Data
clust_data <- mva_data[, -1]
# Step 2: Aggregate Data by Genotype
clust_data_agg <- clust_data %>%
group_by(Geno) %>%
summarise(across(where(is.numeric), mean, na.rm = TRUE))
# Step 3: Standardize the Numerical Data
clust_data_scaled <- clust_data_agg %>%
mutate(across(where(is.numeric), scale))
# Step 4: Calculate the Distance Matrix
dist_matrix <- dist(clust_data_scaled, method = "euclidean")
# Step 5: Perform Hierarchical Clustering
hc <- hclust(dist_matrix)
# Step 6: Convert to dendrogram data
dendro_data <- ggdendro::dendro_data(hc)
# Create the dendrogram plot
dendrogram_plot <- ggplot(width = 12) +  # Adjust the width of the plot
geom_segment(data = dendro_data$segments, aes(x = x, y = y, xend = xend, yend = yend), size = .4, color = "#8cbf13") +
geom_text(data = dendro_data$labels, aes(x = x, y = y, label = label), hjust = -0.1, size = 3) +
geom_hline(yintercept = 8, linetype = "dashed", color = "blue", size = .3)+
theme_minimal() +
labs(title = "Dendrogram Based on Genotypes and Measurements", x = "", y = "Height") +
theme(axis.text.x = element_blank(),
axis.ticks.x = element_blank())
ggsave("./images/dendogram/dendogram_plot.png", plot = dendrogram_plot, width = 12, height = 8, dpi = 600)
dendrogram_plot
# Step 1: Prepare the Data
clust_data <- mva_data[, -1]
# Step 2: Aggregate Data by Genotype
clust_data_agg <- clust_data %>%
group_by(Geno) %>%
summarise(across(where(is.numeric), mean, na.rm = TRUE))
# Step 3: Standardize the Numerical Data
clust_data_scaled <- clust_data_agg %>%
mutate(across(where(is.numeric), scale))
# Step 4: Calculate the Distance Matrix
dist_matrix <- dist(clust_data_scaled, method = "euclidean")
# Step 5: Perform Hierarchical Clustering
hc <- hclust(dist_matrix)
# Step 6: Convert to dendrogram data
dendro_data <- ggdendro::dendro_data(hc)
# Create the dendrogram plot
dendrogram_plot <- ggplot(width = 12) +  # Adjust the width of the plot
geom_segment(data = dendro_data$segments, aes(x = x, y = y, xend = xend, yend = yend), size = .4, color = "#8cbf13") +
geom_text(data = dendro_data$labels, aes(x = x, y = y, label = label), hjust = -0.1, size = 3) +
geom_hline(yintercept = 8, linetype = "dashed", color = "blue", size = .3)+
theme_minimal() +
labs(title = "Dendrogram Using Agglomerative Clustering Method", x = "", y = "Height") +
theme(axis.text.x = element_blank(),
axis.ticks.x = element_blank())
ggsave("./images/dendogram/dendogram_plot.png", plot = dendrogram_plot, width = 12, height = 8, dpi = 600)
dendrogram_plot
